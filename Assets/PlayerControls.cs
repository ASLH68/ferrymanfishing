//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MyActionMap"",
            ""id"": ""471fd7f0-1502-4bd1-8e40-b0320d9e015c"",
            ""actions"": [
                {
                    ""name"": ""Cast"",
                    ""type"": ""Button"",
                    ""id"": ""9073d7e8-e9c5-42ce-981c-dda8795dff24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reel"",
                    ""type"": ""Button"",
                    ""id"": ""3cc2adf4-7579-41f9-b67e-07b198acae58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a8c1ee4-639c-4c9a-bc1e-60e8af4d3edf"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc803b6f-f41a-41cf-8c03-5ef8c6b031ec"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e038a0f4-54f0-4e31-9425-f903a1794f6c"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f848248-8a31-4149-a3f3-4653908c3ac2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MyActionMap
        m_MyActionMap = asset.FindActionMap("MyActionMap", throwIfNotFound: true);
        m_MyActionMap_Cast = m_MyActionMap.FindAction("Cast", throwIfNotFound: true);
        m_MyActionMap_Reel = m_MyActionMap.FindAction("Reel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MyActionMap
    private readonly InputActionMap m_MyActionMap;
    private IMyActionMapActions m_MyActionMapActionsCallbackInterface;
    private readonly InputAction m_MyActionMap_Cast;
    private readonly InputAction m_MyActionMap_Reel;
    public struct MyActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public MyActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cast => m_Wrapper.m_MyActionMap_Cast;
        public InputAction @Reel => m_Wrapper.m_MyActionMap_Reel;
        public InputActionMap Get() { return m_Wrapper.m_MyActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MyActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IMyActionMapActions instance)
        {
            if (m_Wrapper.m_MyActionMapActionsCallbackInterface != null)
            {
                @Cast.started -= m_Wrapper.m_MyActionMapActionsCallbackInterface.OnCast;
                @Cast.performed -= m_Wrapper.m_MyActionMapActionsCallbackInterface.OnCast;
                @Cast.canceled -= m_Wrapper.m_MyActionMapActionsCallbackInterface.OnCast;
                @Reel.started -= m_Wrapper.m_MyActionMapActionsCallbackInterface.OnReel;
                @Reel.performed -= m_Wrapper.m_MyActionMapActionsCallbackInterface.OnReel;
                @Reel.canceled -= m_Wrapper.m_MyActionMapActionsCallbackInterface.OnReel;
            }
            m_Wrapper.m_MyActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Cast.started += instance.OnCast;
                @Cast.performed += instance.OnCast;
                @Cast.canceled += instance.OnCast;
                @Reel.started += instance.OnReel;
                @Reel.performed += instance.OnReel;
                @Reel.canceled += instance.OnReel;
            }
        }
    }
    public MyActionMapActions @MyActionMap => new MyActionMapActions(this);
    public interface IMyActionMapActions
    {
        void OnCast(InputAction.CallbackContext context);
        void OnReel(InputAction.CallbackContext context);
    }
}
